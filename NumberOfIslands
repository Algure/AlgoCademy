/*
Number of Islands - O(n * m)

Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
1 1 1 1 0
1 1 0 1 0
1 1 0 0 0
0 0 0 0 0

Output: 1
Example 2:

Input:
1 1 0 0 0
1 1 0 0 0
0 0 1 0 0
0 0 0 1 1

Output: 3
*/

class Solution {
    
    boolean isValidCell(int[][] grid, int row, int col) {
        try {
            return grid[row][col] == 1;
        } catch (Exception exception) {
            return false;
        }
    }
    
    void dfs(int[][] grid, int row, int col) {
        if (!isValidCell(grid, row, col)) {
            return;
        }
        grid[row][col] = 0;
        int[][] directions = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int[] d : directions) { 
            dfs(grid, row + d[0], col + d[1]);
        }
    }

    public int numIslands(int[][] grid) {
        int result = 0;
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == 1) {
                    result++;
                    dfs(grid, i, j);
                }
            }
        }
        return result;
    }
}
